>>> a = __import__("100-matrix_mul")
>>> a.matrix_mul([[1, 2]], [[1, 1], [2, 1]])
[[5, 3]]

>>> a.matrix_mul()
Traceback (most recent call last):
TypeError: matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'
>>> a.matrix_mul("ade", "dfsd")
Traceback (most recent call last):
TypeError: m_a must be a list
>>> a.matrix_mul([[2, 4, 6], [8, 10, 12]], "sdfsf")
Traceback (most recent call last):
TypeError: m_b must be a list
>>> a.matrix_mul([3, 2, 1], [2, 5])
Traceback (most recent call last):
TypeError: m_a must be a list of lists
>>> a.matrix_mul([[3, 2, 1], [1, 2, 3]], [2, 5])
Traceback (most recent call last):
TypeError: m_b must be a list of lists
>>> a.matrix_mul([[]], [[5],[3]])
Traceback (most recent call last):
ValueError: m_a can't be empty
>>> a.matrix_mul([[5],[3]], [[]])
Traceback (most recent call last):
ValueError: m_b can't be empty
>>> a.matrix_mul([[5, 2, 1], ["sad", 3, 4]], [[5], [3]])
Traceback (most recent call last):
TypeError: m_a should contain only integers or floats
>>> a.matrix_mul([[5], [3]], [[5, 2, 1], ["sad", 3, 4]])
Traceback (most recent call last):
TypeError: m_b should contain only integers or floats
>>> a.matrix_mul([[5, 2, 1], [3, 4]], [[5],[3]])
Traceback (most recent call last):
TypeError: each row of m_a must be of the same size
>>> a.matrix_mul([[5],[3]], [[5, 2, 1], [3, 4]])
Traceback (most recent call last):
TypeError: each row of m_b must be of the same size
>>> a.matrix_mul([[2],[3]], [[2, 3], [3, 4]])
Traceback (most recent call last):
ValueError: m_a and m_b can't be multiplied
